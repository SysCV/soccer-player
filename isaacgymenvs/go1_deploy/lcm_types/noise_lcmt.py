"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct


class noise_lcmt(object):
    __slots__ = ["sample", "rms"]

    __typenames__ = ["float", "float"]

    __dimensions__ = [[32], None]

    def __init__(self):
        self.sample = [0.0 for dim0 in range(32)]
        self.rms = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(noise_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">32f", *self.sample[:32]))
        buf.write(struct.pack(">f", self.rms))

    def decode(data):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != noise_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return noise_lcmt._decode_one(buf)

    decode = staticmethod(decode)

    def _decode_one(buf):
        self = noise_lcmt()
        self.sample = struct.unpack(">32f", buf.read(128))
        self.rms = struct.unpack(">f", buf.read(4))[0]
        return self

    _decode_one = staticmethod(_decode_one)

    _hash = None

    def _get_hash_recursive(parents):
        if noise_lcmt in parents:
            return 0
        tmphash = (0x39B44004E090B59B) & 0xFFFFFFFFFFFFFFFF
        tmphash = (
            ((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)
        ) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if noise_lcmt._packed_fingerprint is None:
            noise_lcmt._packed_fingerprint = struct.pack(
                ">Q", noise_lcmt._get_hash_recursive([])
            )
        return noise_lcmt._packed_fingerprint

    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
