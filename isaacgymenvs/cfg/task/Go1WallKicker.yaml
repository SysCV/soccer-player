# used to create the object
name: Go1WallKicker

physics_engine: ${..physics_engine}

env:
  numEnvs: ${resolve_default:32000,${...num_envs}}
  envSpacing: 2. # [m]

  cameraSensorPlt: true

  obs_history: false
  history_length: 15

  action_lag_step: 1

  gait_condition:
    # trotting [0.5,0,0] pacing [0,0,0.5]
    phases: 0.5
    offsets: 0.0
    bounds: 0.0
    kappa: 0.07
    frequency: 3.0
    duration: 0.5

  state_observations:
    base_lin_vel: 3
    base_ang_vel: 3
    projected_gravity: 3
    dof_pos: 12
    dof_vel: 12
    last_actions: 12
    gait_sin_indict: 4

    ball_states_p: 3
    goal_pose: 3


    # pixel_bbox_ball: 4
    # pixel_bbox_goal: 4

    ball_states_v: 3
    base_quat: 4
    ball_event: 1

  pixel_observations:
    enable: false
    height: 224
    width: 224
    cam_range: 110
    history: 1
    head_cam_pose: [0.3, 0.0, 0.0]
    # bot_cam_pose: [0.25, 0.0, -0.1]

  obs_privilege: true
  priviledgeStates:
    base_lin_vel: 3
    base_ang_vel: 3
    ball_states_v: 3
    base_quat: 4
    ball_event: 1

  actions_num: 12

  terminateCondition:
    robot_x_range: [-1.0, 1.5] # [m]
    ball_x_range: [-1.0, 3.5] # [m]
    ball_y_range: [-2, 2] # [m]
    valid_catch_range: 0.35 # [m]
    valid_hit_wall_range: 0.15 # [m]
    min_speed: 0.3 # [m/s]

  clipObservations: 5.0
  clipActions: 1.0

  plane:
    staticFriction: 0.6 # [-]
    dynamicFriction: 0.6 # [-]
    restitution: 0.4 # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.33] # x,y,z [m]
    rot: [0.00, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0] # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0] # x,y,z [rad/s]

  goalInitState:
    pos: [3.0, 0.0, 0.15] # x,y,z [m]
    randomPosRange: [0.0, 2.0, 0.0]

  wallInitState:
    pos: [3.01, 0.0, 0.5] # x,y,z [m]
    randomPosRange: [0.0, 0.0, 0.0]

  ballInitState:
    pos: [0.30, 0.0, 0.11] # x,y,z [m]
    randomPosRange: [0.1, 0.5, 0.0]
    # ballInitSpeed: -1.0 # [m/s]
    mass: 0.4 # [kg]

  control:
    # PD Drive parameters:
    stiffness: 20.0 # [N*m/rad]
    damping: 0.5 # [N*m*s/rad]
    actionScale: 0.5
    hipAddtionalScale: 0.5
    controlFrequencyInv: 1 # 60 Hz
    # todo: change to a1 param?

  defaultJointAngles: # = target angles when action = 0.0
    FL_hip_joint: .1 # [rad]
    RL_hip_joint: 0.1 # [rad]
    FR_hip_joint: -0.1 # [rad]
    RR_hip_joint: -0.1 # [rad]

    FL_thigh_joint: 0.8 # [rad]
    RL_thigh_joint: 1. # [rad]
    FR_thigh_joint: 0.8 # [rad]
    RR_thigh_joint: 1. # [rad]

    FL_calf_joint: -1.5 # [rad]
    RL_calf_joint: -1.5 # [rad]
    FR_calf_joint: -1.5 # [rad]
    RR_calf_joint: -1.5 # [rad]

  rewards:
    only_positive_rewards_ji22_style: True
    sigma_rew_neg: 0.02 # is important!!

    rewardScales:
      ball_direction_guidance_dog: 0.5
      ball_direction_guidance_goal: 0.5
      ball_speed_norm: 1.0
      ball_dog_dis: 1.0
      ball_goal_dis: 1.0
      robot_y_guidance: 0.1

      # sparse reward need times episode length 20
      hit_wall_and_switch: 10.0
      catch_and_switch: 5.0

      dog_heading_ball: -0.5 # once been 1/200
      dog_heading_goal: -0.5
      collision: -5.0
      orientation: -5.0
      lin_vel_z: -0.02
      torque: -0.0001
      dof_pos: -0.05
      dof_acc: -2.5e-7
      dof_vel: -0.0001
      action_rate: -0.01 # when have lag, it will be different with smoothness
      action_smoothness_1: -0.1
      action_smoothness_2: -0.1

      # base_height: -0.001

      # walk this way, this replace the feet air time
      tracking_contacts_shaped_force: 4.0
      tracking_contacts_shaped_vel: 4.0
      dog_wall_dis: 0.05
      # ball_height: 2.0

    rewardParams:
      ball_direction_guidance:
        sigma: 0.25
      robot_y_guidance:
        sigma: 0.25
      ball_speed_norm:
        sigma: 9.0 # 3 ** 2

      dog_heading_ball:
        clip_min: 0.5
      dog_heading_goal:
        clip_min: 0.5

      ball_dog_dis:
        sigma: 0.25
      ball_goal_dis:
        sigma: 0.25
      dog_wall_dis:
        good_dis: 2.5
      hit_wall_and_switch:
        success_bonus_scale: 4.0
        hit_times_penalty: 2.0
        valid_success_range: 0.22 # should be greater than terminateCondition.valid_hit_wall_range

      tracking_contacts_shaped_force:
        sigma: 100.
      tracking_contacts_shaped_vel:
        sigma: 10.

  # for a1

  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 4 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  learn:
    # normalization
    linearVelocityScale: 1.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05

    # episode length in seconds
    episodeLength_s: 20

    # termination
    maxInGroundLength_s: 20
    maxStableLength_s: 3

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 4] # [m]
    lookat: [1., 1, 3.3] # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.02
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  target_ball: True
  target_goal: True
  have_wall: False
  actor_per_environment: 4
  randomize: False
  randomization_params:
    frequency: 600 # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params:
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear" # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      a1:
        #        color: False
        rigid_body_properties:
          mass:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear" # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
