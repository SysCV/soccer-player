# used to create the object
name: Go1WallKicker

physics_engine: ${..physics_engine}

env:
  cameraSensor: false
  cameraPlt: true
  cam_width: 
  cam_height:
  cam_range: 130

  terminateCondition:
    robot_x_range: [-1.0, 2.0] # [m]
    ball_x_range: [-1.5, 3.5] # [m]
    ball_y_range: [-3, 3] # [m]


  numEnvs: ${resolve_default:4096,${...num_envs}}
  envSpacing: 2.  # [m]

  clipObservations: 5.0
  clipActions: 1.0

  plane:
    staticFriction: 0.8  # [-]
    dynamicFriction: 0.6  # [-]
    restitution: 0.9       # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.30] # x,y,z [m]
    rot: [0.00, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  goalInitState:
    pos: [ 3.0, 0.0, 0.35 ] # x,y,z [m]
    randomPosRange: [ 0.0, 2.0, 0.2]

  wallInitState:
    pos: [ 3.01, 0.0, 0.5 ] # x,y,z [m]
    randomPosRange: [ 0.0, 0.0, 0.0]

  ballInitState:
    pos: [ 0.6, 0.0, 0.12 ] # x,y,z [m]
    randomPosRange: [ 0.2, 0.5, 0. ]
    # ballInitSpeed: 0.0 # [m/s]
    mass: 0.05 # [kg]

  randomBallStateRanges:
    pos_x: [-0.5, 0.5] # min max [m]
    pos_y: [-0.5, 0.5] # min max [m]
    v_x: [-0.5, 0.5] # min max [m/s]
    v_y: [-0.5, 0.5] # min max [m/s]

  randomCommandVelocityRanges:
    linear_x: [-2., 2.] # min max [m/s]
    linear_y: [-2., 2.]   # min max [m/s]
    yaw: [-1., 1.]          # min max [rad/s]

  control:
    # PD Drive parameters:
    stiffness: 20.0  # [N*m/rad]
    damping: 0.5   # [N*m*s/rad]
    actionScale: 0.7
    controlFrequencyInv: 1 # 60 Hz
    # todo: change to a1 param?

  defaultJointAngles:  # = target angles when action = 0.0
    FL_hip_joint: .1   # [rad]
    RL_hip_joint: 0.1   # [rad]
    FR_hip_joint: -0.1  # [rad]
    RR_hip_joint: -0.1    # [rad]

    FL_thigh_joint: 0.8     # [rad]
    RL_thigh_joint: 1.    # [rad]
    FR_thigh_joint: 0.8     # [rad]
    RR_thigh_joint: 1.   # [rad]

    FL_calf_joint: -1.5    # [rad]
    RL_calf_joint: -1.5    # [rad]
    FR_calf_joint: -1.5   # [rad]
    RR_calf_joint: -1.5     # [rad]

  rewards:
    rewardScales:
      ball_speed: 1.0
      torque: 0.00025
      dog_heading_ball: 0.5 # once been 1/200
      ball_dog_dis: 4.0
      ball_goal_dis: 4.0
      success: 1000.0
      # hit_and_switch: 1000.0
      hit_wall_and_switch: 100.0
      catch_and_switch: 100.0
      dog_wall_dis: 2.0
      collision: -10.0


    rewardParams:
      ball_speed:
        clip_max: 3.0
      ball_dog_dis:
        clip_min: 0.5
      dog_wall_dis:
        good_dis: 2.5
      hit_wall_and_switch:
        success_bonus_scale: 20.0
        hit_times_penalty: 1
        valid_success_range: 0.15


      



# for a1


  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 4 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  learn:
    # # rewards
    # baseBallDistanceRewardScale: 1.0
    # BallVelocityProjectRewardScale: 1.0
    # baseHeadingRewardScale: 1.0
    # linearVelocityXYRewardScale: 1.0
    # angularVelocityZRewardScale: 0.5
    # torqueRewardScale: -0.00025 

    # normalization
    linearVelocityScale: 1.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05

    # episode length in seconds
    episodeLength_s: 20
    
    # termination
    maxInGroundLength_s: 20
    maxStableLength_s: 4

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 4]  # [m]
    lookat: [1., 1, 3.3]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.02
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:

  target_ball: True
  target_goal: True
  have_wall: False
  actor_per_environment: 4
  randomize: False
  randomization_params:
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      a1:
#        color: False
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
